//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="EstimatesSoap", Namespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates")]
public partial class Estimates : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetEstimateConsensusOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetEstimateConsensus1OperationCompleted;
    
    private System.Threading.SendOrPostCallback GetEstimateDetailOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetEstimateDetail1OperationCompleted;
    
    /// <remarks/>
    public Estimates() {
        this.Url = "https://api.capitaliq.com/ciqdotnet/api/current/Estimates.asmx";
    }
    
    /// <remarks/>
    public event GetEstimateConsensusCompletedEventHandler GetEstimateConsensusCompleted;
    
    /// <remarks/>
    public event GetEstimateConsensus1CompletedEventHandler GetEstimateConsensus1Completed;
    
    /// <remarks/>
    public event GetEstimateDetailCompletedEventHandler GetEstimateDetailCompleted;
    
    /// <remarks/>
    public event GetEstimateDetail1CompletedEventHandler GetEstimateDetail1Completed;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates/GetEstimateConsensusAb" +
        "solute", RequestElementName="GetEstimateConsensusAbsolute", RequestNamespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates", ResponseElementName="GetEstimateConsensusAbsoluteResponse", ResponseNamespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlArrayAttribute("GetEstimateConsensusAbsoluteResult")]
    public EstimateConsensus[] GetEstimateConsensus(int[] companyId, int[] tradingItemId, System.DateTime startPeriodDate, System.DateTime endPeriodDate, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId) {
        object[] results = this.Invoke("GetEstimateConsensus", new object[] {
                    companyId,
                    tradingItemId,
                    startPeriodDate,
                    endPeriodDate,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId});
        return ((EstimateConsensus[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEstimateConsensus(int[] companyId, int[] tradingItemId, System.DateTime startPeriodDate, System.DateTime endPeriodDate, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEstimateConsensus", new object[] {
                    companyId,
                    tradingItemId,
                    startPeriodDate,
                    endPeriodDate,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public EstimateConsensus[] EndGetEstimateConsensus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EstimateConsensus[])(results[0]));
    }
    
    /// <remarks/>
    public void GetEstimateConsensusAsync(int[] companyId, int[] tradingItemId, System.DateTime startPeriodDate, System.DateTime endPeriodDate, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId) {
        this.GetEstimateConsensusAsync(companyId, tradingItemId, startPeriodDate, endPeriodDate, periodTypeId, dataItemId, startAsOfDate, endAsOfDate, currencyId, currencyConversionMethod, userObjectId, null);
    }
    
    /// <remarks/>
    public void GetEstimateConsensusAsync(int[] companyId, int[] tradingItemId, System.DateTime startPeriodDate, System.DateTime endPeriodDate, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId, object userState) {
        if ((this.GetEstimateConsensusOperationCompleted == null)) {
            this.GetEstimateConsensusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEstimateConsensusOperationCompleted);
        }
        this.InvokeAsync("GetEstimateConsensus", new object[] {
                    companyId,
                    tradingItemId,
                    startPeriodDate,
                    endPeriodDate,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId}, this.GetEstimateConsensusOperationCompleted, userState);
    }
    
    private void OnGetEstimateConsensusOperationCompleted(object arg) {
        if ((this.GetEstimateConsensusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetEstimateConsensusCompleted(this, new GetEstimateConsensusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.WebMethodAttribute(MessageName="GetEstimateConsensus1")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates/GetEstimateConsensusRe" +
        "lative", RequestElementName="GetEstimateConsensusRelative", RequestNamespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates", ResponseElementName="GetEstimateConsensusRelativeResponse", ResponseNamespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlArrayAttribute("GetEstimateConsensusRelativeResult")]
    public EstimateConsensus[] GetEstimateConsensus(int[] companyId, int[] tradingItemId, int startPeriodOffset, int endPeriodOffset, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId) {
        object[] results = this.Invoke("GetEstimateConsensus1", new object[] {
                    companyId,
                    tradingItemId,
                    startPeriodOffset,
                    endPeriodOffset,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId});
        return ((EstimateConsensus[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEstimateConsensus1(int[] companyId, int[] tradingItemId, int startPeriodOffset, int endPeriodOffset, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEstimateConsensus1", new object[] {
                    companyId,
                    tradingItemId,
                    startPeriodOffset,
                    endPeriodOffset,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public EstimateConsensus[] EndGetEstimateConsensus1(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EstimateConsensus[])(results[0]));
    }
    
    /// <remarks/>
    public void GetEstimateConsensus1Async(int[] companyId, int[] tradingItemId, int startPeriodOffset, int endPeriodOffset, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId) {
        this.GetEstimateConsensus1Async(companyId, tradingItemId, startPeriodOffset, endPeriodOffset, periodTypeId, dataItemId, startAsOfDate, endAsOfDate, currencyId, currencyConversionMethod, userObjectId, null);
    }
    
    /// <remarks/>
    public void GetEstimateConsensus1Async(int[] companyId, int[] tradingItemId, int startPeriodOffset, int endPeriodOffset, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId, object userState) {
        if ((this.GetEstimateConsensus1OperationCompleted == null)) {
            this.GetEstimateConsensus1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEstimateConsensus1OperationCompleted);
        }
        this.InvokeAsync("GetEstimateConsensus1", new object[] {
                    companyId,
                    tradingItemId,
                    startPeriodOffset,
                    endPeriodOffset,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId}, this.GetEstimateConsensus1OperationCompleted, userState);
    }
    
    private void OnGetEstimateConsensus1OperationCompleted(object arg) {
        if ((this.GetEstimateConsensus1Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetEstimateConsensus1Completed(this, new GetEstimateConsensus1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates/GetEstimateDetailAbsol" +
        "ute", RequestElementName="GetEstimateDetailAbsolute", RequestNamespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates", ResponseElementName="GetEstimateDetailAbsoluteResponse", ResponseNamespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlArrayAttribute("GetEstimateDetailAbsoluteResult")]
    public EstimateDetail[] GetEstimateDetail(int[] companyId, int[] tradingItemId, int[] researchContributorId, System.DateTime startPeriodDate, System.DateTime endPeriodDate, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId) {
        object[] results = this.Invoke("GetEstimateDetail", new object[] {
                    companyId,
                    tradingItemId,
                    researchContributorId,
                    startPeriodDate,
                    endPeriodDate,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId});
        return ((EstimateDetail[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEstimateDetail(int[] companyId, int[] tradingItemId, int[] researchContributorId, System.DateTime startPeriodDate, System.DateTime endPeriodDate, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEstimateDetail", new object[] {
                    companyId,
                    tradingItemId,
                    researchContributorId,
                    startPeriodDate,
                    endPeriodDate,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public EstimateDetail[] EndGetEstimateDetail(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EstimateDetail[])(results[0]));
    }
    
    /// <remarks/>
    public void GetEstimateDetailAsync(int[] companyId, int[] tradingItemId, int[] researchContributorId, System.DateTime startPeriodDate, System.DateTime endPeriodDate, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId) {
        this.GetEstimateDetailAsync(companyId, tradingItemId, researchContributorId, startPeriodDate, endPeriodDate, periodTypeId, dataItemId, startAsOfDate, endAsOfDate, currencyId, currencyConversionMethod, userObjectId, null);
    }
    
    /// <remarks/>
    public void GetEstimateDetailAsync(int[] companyId, int[] tradingItemId, int[] researchContributorId, System.DateTime startPeriodDate, System.DateTime endPeriodDate, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId, object userState) {
        if ((this.GetEstimateDetailOperationCompleted == null)) {
            this.GetEstimateDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEstimateDetailOperationCompleted);
        }
        this.InvokeAsync("GetEstimateDetail", new object[] {
                    companyId,
                    tradingItemId,
                    researchContributorId,
                    startPeriodDate,
                    endPeriodDate,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId}, this.GetEstimateDetailOperationCompleted, userState);
    }
    
    private void OnGetEstimateDetailOperationCompleted(object arg) {
        if ((this.GetEstimateDetailCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetEstimateDetailCompleted(this, new GetEstimateDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.WebMethodAttribute(MessageName="GetEstimateDetail1")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates/GetEstimateDetailRelat" +
        "ive", RequestElementName="GetEstimateDetailRelative", RequestNamespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates", ResponseElementName="GetEstimateDetailRelativeResponse", ResponseNamespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlArrayAttribute("GetEstimateDetailRelativeResult")]
    public EstimateDetail[] GetEstimateDetail(int[] companyId, int[] tradingItemId, int[] researchContributorId, int startPeriodOffset, int endPeriodOffset, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId) {
        object[] results = this.Invoke("GetEstimateDetail1", new object[] {
                    companyId,
                    tradingItemId,
                    researchContributorId,
                    startPeriodOffset,
                    endPeriodOffset,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId});
        return ((EstimateDetail[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEstimateDetail1(int[] companyId, int[] tradingItemId, int[] researchContributorId, int startPeriodOffset, int endPeriodOffset, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEstimateDetail1", new object[] {
                    companyId,
                    tradingItemId,
                    researchContributorId,
                    startPeriodOffset,
                    endPeriodOffset,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public EstimateDetail[] EndGetEstimateDetail1(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((EstimateDetail[])(results[0]));
    }
    
    /// <remarks/>
    public void GetEstimateDetail1Async(int[] companyId, int[] tradingItemId, int[] researchContributorId, int startPeriodOffset, int endPeriodOffset, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId) {
        this.GetEstimateDetail1Async(companyId, tradingItemId, researchContributorId, startPeriodOffset, endPeriodOffset, periodTypeId, dataItemId, startAsOfDate, endAsOfDate, currencyId, currencyConversionMethod, userObjectId, null);
    }
    
    /// <remarks/>
    public void GetEstimateDetail1Async(int[] companyId, int[] tradingItemId, int[] researchContributorId, int startPeriodOffset, int endPeriodOffset, int[] periodTypeId, int[] dataItemId, System.DateTime startAsOfDate, System.DateTime endAsOfDate, int currencyId, int currencyConversionMethod, int userObjectId, object userState) {
        if ((this.GetEstimateDetail1OperationCompleted == null)) {
            this.GetEstimateDetail1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEstimateDetail1OperationCompleted);
        }
        this.InvokeAsync("GetEstimateDetail1", new object[] {
                    companyId,
                    tradingItemId,
                    researchContributorId,
                    startPeriodOffset,
                    endPeriodOffset,
                    periodTypeId,
                    dataItemId,
                    startAsOfDate,
                    endAsOfDate,
                    currencyId,
                    currencyConversionMethod,
                    userObjectId}, this.GetEstimateDetail1OperationCompleted, userState);
    }
    
    private void OnGetEstimateDetail1OperationCompleted(object arg) {
        if ((this.GetEstimateDetail1Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetEstimateDetail1Completed(this, new GetEstimateDetail1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates")]
public partial class EstimateConsensus {
    
    private int companyIdField;
    
    private int tradingItemIdField;
    
    private Period[] periodsField;
    
    private EstimateConsensusDataValue[] estimateConsensusDataValuesField;
    
    /// <remarks/>
    public int CompanyId {
        get {
            return this.companyIdField;
        }
        set {
            this.companyIdField = value;
        }
    }
    
    /// <remarks/>
    public int TradingItemId {
        get {
            return this.tradingItemIdField;
        }
        set {
            this.tradingItemIdField = value;
        }
    }
    
    /// <remarks/>
    public Period[] Periods {
        get {
            return this.periodsField;
        }
        set {
            this.periodsField = value;
        }
    }
    
    /// <remarks/>
    public EstimateConsensusDataValue[] EstimateConsensusDataValues {
        get {
            return this.estimateConsensusDataValuesField;
        }
        set {
            this.estimateConsensusDataValuesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates")]
public partial class Period {
    
    private int periodTypeIdField;
    
    private System.Nullable<int> fiscalYearField;
    
    private System.Nullable<int> fiscalQuarterField;
    
    private System.Nullable<int> calendarYearField;
    
    private System.Nullable<int> calendarQuarterField;
    
    private System.Nullable<int> periodOffsetField;
    
    private System.Nullable<System.DateTime> periodEndDateField;
    
    /// <remarks/>
    public int PeriodTypeId {
        get {
            return this.periodTypeIdField;
        }
        set {
            this.periodTypeIdField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> FiscalYear {
        get {
            return this.fiscalYearField;
        }
        set {
            this.fiscalYearField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> FiscalQuarter {
        get {
            return this.fiscalQuarterField;
        }
        set {
            this.fiscalQuarterField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> CalendarYear {
        get {
            return this.calendarYearField;
        }
        set {
            this.calendarYearField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> CalendarQuarter {
        get {
            return this.calendarQuarterField;
        }
        set {
            this.calendarQuarterField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> PeriodOffset {
        get {
            return this.periodOffsetField;
        }
        set {
            this.periodOffsetField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<System.DateTime> PeriodEndDate {
        get {
            return this.periodEndDateField;
        }
        set {
            this.periodEndDateField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates")]
public partial class EstimateDetailDataValue {
    
    private int dataItemIdField;
    
    private string dataItemValueField;
    
    private int scaleIdField;
    
    private int unitTypeIdField;
    
    private System.Nullable<int> currencyIdField;
    
    private System.DateTime estimateStartDateField;
    
    private System.DateTime estimateExpireDateField;
    
    private bool excludedFromConsensusFlagField;
    
    private string exclusionCommentField;
    
    private System.Nullable<int> professionalIdField;
    
    private string analystNameField;
    
    private System.Nullable<System.DateTime> currencyConversionDateField;
    
    private System.Nullable<double> currencyConversionRateField;
    
    private System.Nullable<int> currencyConversionMethodField;
    
    /// <remarks/>
    public int DataItemId {
        get {
            return this.dataItemIdField;
        }
        set {
            this.dataItemIdField = value;
        }
    }
    
    /// <remarks/>
    public string DataItemValue {
        get {
            return this.dataItemValueField;
        }
        set {
            this.dataItemValueField = value;
        }
    }
    
    /// <remarks/>
    public int ScaleId {
        get {
            return this.scaleIdField;
        }
        set {
            this.scaleIdField = value;
        }
    }
    
    /// <remarks/>
    public int UnitTypeId {
        get {
            return this.unitTypeIdField;
        }
        set {
            this.unitTypeIdField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> CurrencyId {
        get {
            return this.currencyIdField;
        }
        set {
            this.currencyIdField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime EstimateStartDate {
        get {
            return this.estimateStartDateField;
        }
        set {
            this.estimateStartDateField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime EstimateExpireDate {
        get {
            return this.estimateExpireDateField;
        }
        set {
            this.estimateExpireDateField = value;
        }
    }
    
    /// <remarks/>
    public bool ExcludedFromConsensusFlag {
        get {
            return this.excludedFromConsensusFlagField;
        }
        set {
            this.excludedFromConsensusFlagField = value;
        }
    }
    
    /// <remarks/>
    public string ExclusionComment {
        get {
            return this.exclusionCommentField;
        }
        set {
            this.exclusionCommentField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> ProfessionalId {
        get {
            return this.professionalIdField;
        }
        set {
            this.professionalIdField = value;
        }
    }
    
    /// <remarks/>
    public string AnalystName {
        get {
            return this.analystNameField;
        }
        set {
            this.analystNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<System.DateTime> CurrencyConversionDate {
        get {
            return this.currencyConversionDateField;
        }
        set {
            this.currencyConversionDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<double> CurrencyConversionRate {
        get {
            return this.currencyConversionRateField;
        }
        set {
            this.currencyConversionRateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> CurrencyConversionMethod {
        get {
            return this.currencyConversionMethodField;
        }
        set {
            this.currencyConversionMethodField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates")]
public partial class EstimateDetail {
    
    private int companyIdField;
    
    private int tradingItemIdField;
    
    private int researchContributorIdField;
    
    private int periodTypeIdField;
    
    private System.Nullable<int> fiscalYearField;
    
    private System.Nullable<int> fiscalQuarterField;
    
    private System.Nullable<int> calendarYearField;
    
    private System.Nullable<int> calendarQuarterField;
    
    private System.Nullable<System.DateTime> periodEndDateField;
    
    private System.Nullable<int> periodOffsetField;
    
    private EstimateDetailDataValue[] estimateDetailDataValuesField;
    
    /// <remarks/>
    public int CompanyId {
        get {
            return this.companyIdField;
        }
        set {
            this.companyIdField = value;
        }
    }
    
    /// <remarks/>
    public int TradingItemId {
        get {
            return this.tradingItemIdField;
        }
        set {
            this.tradingItemIdField = value;
        }
    }
    
    /// <remarks/>
    public int ResearchContributorId {
        get {
            return this.researchContributorIdField;
        }
        set {
            this.researchContributorIdField = value;
        }
    }
    
    /// <remarks/>
    public int PeriodTypeId {
        get {
            return this.periodTypeIdField;
        }
        set {
            this.periodTypeIdField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> FiscalYear {
        get {
            return this.fiscalYearField;
        }
        set {
            this.fiscalYearField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> FiscalQuarter {
        get {
            return this.fiscalQuarterField;
        }
        set {
            this.fiscalQuarterField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> CalendarYear {
        get {
            return this.calendarYearField;
        }
        set {
            this.calendarYearField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> CalendarQuarter {
        get {
            return this.calendarQuarterField;
        }
        set {
            this.calendarQuarterField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<System.DateTime> PeriodEndDate {
        get {
            return this.periodEndDateField;
        }
        set {
            this.periodEndDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> PeriodOffset {
        get {
            return this.periodOffsetField;
        }
        set {
            this.periodOffsetField = value;
        }
    }
    
    /// <remarks/>
    public EstimateDetailDataValue[] EstimateDetailDataValues {
        get {
            return this.estimateDetailDataValuesField;
        }
        set {
            this.estimateDetailDataValuesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.capitaliq.com/CiqDotNet/Estimates/CIQ/Estimates")]
public partial class EstimateConsensusDataValue {
    
    private int dataItemIdField;
    
    private string dataItemValueField;
    
    private int scaleIdField;
    
    private int unitTypeIdField;
    
    private System.Nullable<int> currencyIdField;
    
    private System.DateTime estimateStartDateField;
    
    private System.DateTime estimateExpireDateField;
    
    private System.Nullable<System.DateTime> currencyConversionDateField;
    
    private System.Nullable<double> currencyConversionRateField;
    
    private System.Nullable<int> currencyConversionMethodField;
    
    private string footnoteField;
    
    /// <remarks/>
    public int DataItemId {
        get {
            return this.dataItemIdField;
        }
        set {
            this.dataItemIdField = value;
        }
    }
    
    /// <remarks/>
    public string DataItemValue {
        get {
            return this.dataItemValueField;
        }
        set {
            this.dataItemValueField = value;
        }
    }
    
    /// <remarks/>
    public int ScaleId {
        get {
            return this.scaleIdField;
        }
        set {
            this.scaleIdField = value;
        }
    }
    
    /// <remarks/>
    public int UnitTypeId {
        get {
            return this.unitTypeIdField;
        }
        set {
            this.unitTypeIdField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> CurrencyId {
        get {
            return this.currencyIdField;
        }
        set {
            this.currencyIdField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime EstimateStartDate {
        get {
            return this.estimateStartDateField;
        }
        set {
            this.estimateStartDateField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime EstimateExpireDate {
        get {
            return this.estimateExpireDateField;
        }
        set {
            this.estimateExpireDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<System.DateTime> CurrencyConversionDate {
        get {
            return this.currencyConversionDateField;
        }
        set {
            this.currencyConversionDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<double> CurrencyConversionRate {
        get {
            return this.currencyConversionRateField;
        }
        set {
            this.currencyConversionRateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<int> CurrencyConversionMethod {
        get {
            return this.currencyConversionMethodField;
        }
        set {
            this.currencyConversionMethodField = value;
        }
    }
    
    /// <remarks/>
    public string Footnote {
        get {
            return this.footnoteField;
        }
        set {
            this.footnoteField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void GetEstimateConsensusCompletedEventHandler(object sender, GetEstimateConsensusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetEstimateConsensusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetEstimateConsensusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public EstimateConsensus[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EstimateConsensus[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void GetEstimateConsensus1CompletedEventHandler(object sender, GetEstimateConsensus1CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetEstimateConsensus1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetEstimateConsensus1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public EstimateConsensus[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EstimateConsensus[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void GetEstimateDetailCompletedEventHandler(object sender, GetEstimateDetailCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetEstimateDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetEstimateDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public EstimateDetail[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EstimateDetail[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void GetEstimateDetail1CompletedEventHandler(object sender, GetEstimateDetail1CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetEstimateDetail1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetEstimateDetail1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public EstimateDetail[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((EstimateDetail[])(this.results[0]));
        }
    }
}
